<?xml version="1.0" encoding="UTF-8"?>

<!--Tomcat一个暴露出来三个TCP端口
  1. Server:8005 只是用来接收SHUTDOWN命令
  2. Connector HTTP1.1 8080 用来监听Http请求的端口
  3. Connector JK2 8009 用来监听Ajp请求的端口-->

<!--Server组件只有一个作用：跟标签，关闭Tomcat-->
<Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  <!--APR library loader. Documentation at /docs/apr.html -->
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  -->
  <GlobalNamingResources>
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
  </GlobalNamingResources>

  <!-- 一个Server可以有多个Service，但是通常情况下，我们只需要一个Service
       一个Service可以有多个Connector和一个Engine，Service的作用就是将Connector绑定到Engine
       Service的名称默认Catalina没有什么具体意义。-->
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->
    <!--每个Service中的Connector一般多个，表明监听多个端口和多个协议的组合
        port是端口 Protocol是协议，一般情况我们Tomcat会设置两个协议Http Ajp
        connectionTimeout是链接超时时间，默认20s，超过20s服务器未响应就断开连接
             三种情况超时：1.值过小，下载服务器大文件会报错，设置-1表示不限制
                          2.服务器发生网络不稳定，迟迟未给出客户端的响应，集群容错处理
                          3.请求的线程实在过多，远远超过了maxThread,请求在acceptQueue中得不到处理，增加线程处理数量
        redirectPort是https请求重定向到8443端口 -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!--Connector标签除了上面的这些属性外，还有几个比较重要的性能调优属性
        protocal=“HTTP/1.1” tomcat7默认IO模型是BIO tomcat8默认IO模型是NIO 当然tomcat7也是可以设置IO模型为NIO的
        minThread服务器启动给这个Connector的处理请求线程数
        maxThread在基础的线程数上开辟的最多线程数，为了资源控制，不可能无限开辟线程
        acceptCount请求实在过多，除了正在处理的请求外可以加到请求队列的最大数 一般800-1000
        SSLEnabled是否进行ssl验证，https请求需要进行验证
        enableLookups是否开启可DNS转换，关闭可以增加服务器的性能-->
    <Connector port="8081" protocol="org.apache.coyote.http11.Http11NioProtocol"
               minThread="30" maxThread="512"
               acceptCount="800" SSLEnabled="false" enableLookups="false"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />


    <!-- 一个Service可以有多个Engine，Engine的名称默认Catalina没有什么实际意义
         每个Engine不独立处理请求，它将Connector获得的请求交给Host处理
         name没什么具体的意义，一般为Catalina
         defaultHost对应的值就是默认的处理Host -->
    <Engine name="Catalina" defaultHost="localhost">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->
      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>
      <!--Host的名称是可以重命名的，只需要对应上面的Engine默认值即可
          一个Engine下可以有多个Host虚拟主机
          name对应上面的localhost appBase对应根目录 umpackWARs对应可以直接放置war包自动解压，antoDeply对应自动部署-->
      <!--所以，一般我们将war直接扔在了webapps下，我们获取到请求会自动派发到这个Host下面进行处理-->
      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">
          <!--<Context docBase="" path="" ></Context>-->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />

      </Host>
      <!---->
      <!--接收www.luban.com网站发送的请求，其他的去上面的默认处理Host，appBase是相对Catalina home路径-->
      <Host name="www.luban.com"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">
        <!--Host下面是可以有子标签Context应用程序的
            Context指明具体部署的应用，而不是直接部署appBase下面的所有项目
            Context可以有多个项目，也可以在server.xml外部配置-->
        <Context docBase="/luban.war" path="/l" ></Context>
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />

      </Host>
    </Engine>
  </Service>
</Server>
